[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"TasksCollection.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// imports/api/TasksCollection.js                                    //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nmodule.export({\n  TasksCollection: () => TasksCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst TasksCollection = new Mongo.Collection(\"tasks\");\n///////////////////////////////////////////////////////////////////////\n\n},\"tasksMethods.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// imports/api/tasksMethods.js                                       //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet TasksCollection;\nmodule.link(\"./TasksCollection\", {\n  TasksCollection(v) {\n    TasksCollection = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"tasks.insert\"(text) {\n    check(text, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\"Not authorized.\");\n    }\n\n    TasksCollection.insert({\n      text,\n      createdAt: new Date(),\n      userId: this.userId\n    });\n  },\n\n  \"tasks.remove\"(taskId) {\n    check(taskId, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\"Not authorized.\");\n    }\n\n    TasksCollection.remove(taskId);\n  },\n\n  \"tasks.setIsChecked\"(taskId, isChecked) {\n    check(taskId, String);\n    check(isChecked, Boolean);\n\n    if (!this.userId) {\n      throw new Meteor.Error(\"Not authorized.\");\n    }\n\n    TasksCollection.update(taskId, {\n      $set: {\n        isChecked\n      }\n    });\n  }\n\n});\n///////////////////////////////////////////////////////////////////////\n\n}},\"db\":{\"TasksCollection.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// imports/db/TasksCollection.js                                     //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nmodule.export({\n  TasksCollection: () => TasksCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst TasksCollection = new Mongo.Collection(\"tasks\");\n///////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// server/main.js                                                    //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet TasksCollection;\nmodule.link(\"/imports/db/TasksCollection\", {\n  TasksCollection(v) {\n    TasksCollection = v;\n  }\n\n}, 2);\nmodule.link(\"/imports/api/tasksMethods\");\n\nconst insertTask = (taskText, user) => TasksCollection.insert({\n  text: taskText,\n  userId: user._id,\n  createdAt: new Date()\n});\n\nconst SEED_USERNAME = \"meteorite\";\nconst SEED_PASSWORD = \"password\";\nMeteor.startup(() => {\n  if (!Accounts.findUserByUsername(SEED_USERNAME)) {\n    Accounts.createUser({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD\n    });\n  }\n\n  const user = Accounts.findUserByUsername(SEED_USERNAME);\n\n  if (TasksCollection.find().count() === 0) {\n    [\"First Task\", \"Second Task\", \"Third Task\", \"Fourth Task\", \"Fifth Task\", \"Sixth Task\", \"Seventh Task\"].forEach(taskText => insertTask(taskText, user));\n  }\n});\n///////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"9005c8c91fdb567c2f40f7781d02c7e3db9e87e5","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/TasksCollection.js","imports/api/tasksMethods.js","imports/db/TasksCollection.js","server/main.js"],"names":["module","export","TasksCollection","Mongo","link","v","Collection","check","Meteor","methods","text","String","userId","Error","insert","createdAt","Date","taskId","remove","isChecked","Boolean","update","$set","Accounts","insertTask","taskText","user","_id","SEED_USERNAME","SEED_PASSWORD","startup","findUserByUsername","createUser","username","password","find","count","forEach"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from \"meteor/mongo\";\r\n\r\nexport const TasksCollection = new Mongo.Collection(\"tasks\");\r\n","import { check } from \"meteor/check\";\r\nimport { TasksCollection } from \"./TasksCollection\";\r\n\r\nMeteor.methods({\r\n  \"tasks.insert\"(text) {\r\n    check(text, String);\r\n\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\"Not authorized.\");\r\n    }\r\n\r\n    TasksCollection.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      userId: this.userId,\r\n    });\r\n  },\r\n\r\n  \"tasks.remove\"(taskId) {\r\n    check(taskId, String);\r\n\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\"Not authorized.\");\r\n    }\r\n\r\n    TasksCollection.remove(taskId);\r\n  },\r\n\r\n  \"tasks.setIsChecked\"(taskId, isChecked) {\r\n    check(taskId, String);\r\n    check(isChecked, Boolean);\r\n\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\"Not authorized.\");\r\n    }\r\n\r\n    TasksCollection.update(taskId, {\r\n      $set: {\r\n        isChecked,\r\n      },\r\n    });\r\n  },\r\n});\r\n","import { Mongo } from \"meteor/mongo\";\r\n\r\nexport const TasksCollection = new Mongo.Collection(\"tasks\");\r\n","import { Meteor } from \"meteor/meteor\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { TasksCollection } from \"/imports/db/TasksCollection\";\nimport \"/imports/api/tasksMethods\";\n\nconst insertTask = (taskText, user) =>\n  TasksCollection.insert({\n    text: taskText,\n    userId: user._id,\n    createdAt: new Date(),\n  });\n\nconst SEED_USERNAME = \"meteorite\";\nconst SEED_PASSWORD = \"password\";\n\nMeteor.startup(() => {\n  if (!Accounts.findUserByUsername(SEED_USERNAME)) {\n    Accounts.createUser({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n\n  const user = Accounts.findUserByUsername(SEED_USERNAME);\n\n  if (TasksCollection.find().count() === 0) {\n    [\n      \"First Task\",\n      \"Second Task\",\n      \"Third Task\",\n      \"Fourth Task\",\n      \"Fifth Task\",\n      \"Sixth Task\",\n      \"Seventh Task\",\n    ].forEach((taskText) => insertTask(taskText, user));\n  }\n});\n"]}}]